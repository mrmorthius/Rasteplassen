name: Manual Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag for this release"
        required: true
        default: "v1.0.0"
      description:
        description: "Deployment description"
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          build-args: |
            NODE_ENV=production
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/frontend-rasteplass:production
            ${{ steps.login-ecr.outputs.registry }}/frontend-rasteplass:${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend-rasteplass:production
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend-rasteplass:${{ github.event.inputs.version }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/backend-rasteplass:production
            ${{ steps.login-ecr.outputs.registry }}/backend-rasteplass:${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/backend-rasteplass:production
            ${{ secrets.DOCKERHUB_USERNAME }}/backend-rasteplass:${{ github.event.inputs.version }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Access ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Pull new images
            docker pull ${{ steps.login-ecr.outputs.registry }}/frontend-rasteplass:production
            docker pull ${{ steps.login-ecr.outputs.registry }}/backend-rasteplass:production

            # Create .env file
            cat > ~/.env <<EOF
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            JWT_KEY=${{ secrets.JWT_KEY }}
            JWT_ISSUER=${{ secrets.JWT_ISSUER }}
            JWT_AUDIENCE=${{ secrets.JWT_AUDIENCE }}
            EOF

            #Create nginx.conf
            mkdir -p ~/nginx
            cat > ~/nginx/nginx.conf <<EOF
            events {
                worker_connections 1024;
            }
            http {
                include       /etc/nginx/mime.types;
                default_type  application/octet-stream;
                sendfile      on;

                limit_req_zone $binary_remote_addr zone=api_limit:10m rate=3r/s;
                limit_req_zone $binary_remote_addr zone=frontend_limit:10m rate=5r/s;

                server {
                    listen 80;
                    server_name rasteplass.eu www.rasteplass.eu;

                    location /.well-known/acme-challenge/ {
                        root /var/www/certbot;
                    }

                    location / {
                        return 301 https://\$host\$request_uri;
                    }
                }
                server {
                    listen 443 ssl;
                    server_name rasteplass.eu www.rasteplass.eu;

                    ssl_certificate     /etc/nginx/ssl/cert.pem;
                    ssl_certificate_key /etc/nginx/ssl/key.pem;
                    ssl_protocols       TLSv1.2 TLSv1.3;

                    location / {
                        limit_req zone=frontend_limit burst=10 nodelay;
                        proxy_pass http://frontend:5173/;
                        proxy_set_header Host \$host;
                        proxy_set_header X-Real-IP \$remote_addr;
                        proxy_set_header X-Forwarded-Proto \$scheme;
                    }

                    location /api/ {
                        limit_req zone=api_limit burst=5 nodelay;
                        proxy_pass http://backend:5182/api/;
                        proxy_set_header Host \$host;
                        proxy_set_header X-Real-IP \$remote_addr;
                        proxy_set_header X-Forwarded-Proto \$scheme;
                    }
                }
            }
            EOF

            # Create docker-compose.yml
            cat > ~/docker-compose.yml <<EOF
            services:
              nginx:
                image: nginx:alpine
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
                  - ./certbot/www:/var/www/certbot:ro
                  - ./nginx/ssl:/etc/nginx/ssl:ro
                depends_on:
                  - frontend
                  - backend
                restart: unless-stopped

              backend:
                image: ${{ steps.login-ecr.outputs.registry }}/backend-rasteplass:production
                environment:
                  - ASPNETCORE_ENVIRONMENT=Production
                  - DB_CONNECTION_STRING=Server=db;Database=\${MYSQL_DATABASE};User=\${MYSQL_USER};Password=\${MYSQL_PASSWORD};
                  - JWT_KEY=\${JWT_KEY}
                  - JWT_ISSUER=\${JWT_ISSUER}
                  - JWT_AUDIENCE=\${JWT_AUDIENCE}
                  - JWT_EXPIRES_MINUTES=180
                restart: unless-stopped

              frontend:
                image: ${{ steps.login-ecr.outputs.registry }}/frontend-rasteplass:production
                environment:
                  - NODE_ENV=production
                depends_on:
                  - backend
                restart: unless-stopped

              db:
                image: mysql:8.0
                restart: always
                environment:
                  MYSQL_DATABASE: \${MYSQL_DATABASE}
                  MYSQL_USER: \${MYSQL_USER}
                  MYSQL_PASSWORD: \${MYSQL_PASSWORD}
                  MYSQL_ROOT_PASSWORD: \${MYSQL_ROOT_PASSWORD}
                volumes:
                  - mysql-data:/var/lib/mysql
                  - ./database/init:/docker-entrypoint-initdb.d

            volumes:
              mysql-data:
            EOF

            # Stopp and start docker-compose
            cd ~
            docker-compose --env-file .env down
            docker-compose --env-file .env up -d
